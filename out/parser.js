/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[20,23,24,25,26,50,51,53,54,55,56,57,58,59,62,63,67,69,72,73,75,78,93,96,98,99,100,101,103,104,105,118],$V2=[20,23,24,25,26,51,53,54,55,56,57,58,59,62,63,67,69,72,73,75,78,93,96,98,99,100,101,103,104,105,118],$V3=[20,23,24,25,26,53,54,55,56,57,58,59,62,63,67,69,72,73,75,78,93,96,98,99,100,101,103,104,105,118],$V4=[20,23,24,25,26,54,55,56,57,58,59,62,63,67,69,72,73,75,78,93,96,98,99,100,101,103,104,105,118],$V5=[20,23,24,25,26,55,56,57,58,59,62,63,67,69,72,73,75,78,93,96,98,99,100,101,103,104,105,118],$V6=[20,23,24,25,26,56,57,58,59,62,63,67,69,72,73,75,78,93,96,98,99,100,101,103,104,105,118],$V7=[20,23,24,25,26,57,58,59,62,63,67,69,72,73,75,78,93,96,98,99,100,101,103,104,105,118],$V8=[20,23,24,25,26,59,62,63,67,69,72,73,75,78,93,96,98,99,100,101,103,104,105,118],$V9=[20,23,24,25,26,62,63,67,69,72,73,75,78,93,96,98,99,100,101,103,104,105,118],$Va=[1,54],$Vb=[1,64],$Vc=[1,65],$Vd=[1,66],$Ve=[1,63],$Vf=[1,32],$Vg=[1,33],$Vh=[1,55],$Vi=[1,62],$Vj=[1,67],$Vk=[1,68],$Vl=[1,69],$Vm=[1,45],$Vn=[1,61],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,60],$Vt=[1,46],$Vu=[1,47],$Vv=[1,48],$Vw=[1,36],$Vx=[5,6,80],$Vy=[5,6,60,80,82],$Vz=[1,77],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[1,78],$VE=[5,6,53,60,66,67,80,82,88,89,91,94,106,124,141,142,143,144,146,150,152,156,159,160,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201],$VF=[5,6,52,53,60,66,67,80,82,88,89,91,94,106,124,129,130,131,132,133,134,138,141,142,143,144,146,150,152,156,159,160,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201],$VG=[1,99],$VH=[1,97],$VI=[1,98],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[1,100],$VO=[1,101],$VP=[1,102],$VQ=[1,103],$VR=[1,104],$VS=[1,105],$VT=[2,121],$VU=[5,6,52,53,60,62,66,67,80,82,88,89,91,94,96,98,106,108,109,110,111,112,113,114,115,116,118,122,123,124,125,126,127,129,130,131,132,133,134,138,141,142,143,144,146,150,152,156,159,160,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201],$VV=[5,6,52,53,60,62,66,67,80,82,88,89,91,94,96,98,106,108,109,110,111,112,113,114,115,116,118,120,122,123,124,125,126,127,129,130,131,132,133,134,138,141,142,143,144,146,150,152,156,159,160,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201],$VW=[1,106],$VX=[1,113],$VY=[2,81],$VZ=[1,119],$V_=[1,135],$V$=[1,131],$V01=[20,23,24,25,26,47,67,69,72,73,75,78,93,96,98,99,100,101,103,104,105,136],$V11=[1,166],$V21=[60,80],$V31=[1,172],$V41=[1,173],$V51=[1,174],$V61=[1,175],$V71=[1,176],$V81=[1,177],$V91=[1,178],$Va1=[1,179],$Vb1=[1,180],$Vc1=[1,181],$Vd1=[1,182],$Ve1=[1,183],$Vf1=[1,184],$Vg1=[1,185],$Vh1=[1,186],$Vi1=[1,187],$Vj1=[1,188],$Vk1=[1,189],$Vl1=[1,190],$Vm1=[1,191],$Vn1=[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],$Vo1=[2,73],$Vp1=[1,196],$Vq1=[1,194],$Vr1=[1,195],$Vs1=[2,216],$Vt1=[1,202],$Vu1=[1,203],$Vv1=[5,6,60,80,146,152,156,162,164,169,171,173,201],$Vw1=[1,205],$Vx1=[1,208],$Vy1=[1,209],$Vz1=[1,210],$VA1=[1,211],$VB1=[1,212],$VC1=[2,192],$VD1=[1,207],$VE1=[5,6,53,60,80,106,146,152,156,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201],$VF1=[5,6,53,60,66,67,80,82,88,89,91,94,106,142,143,144,146,150,152,156,159,160,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201],$VG1=[5,6,52,53,60,66,67,80,82,88,89,91,94,106,108,109,110,111,116,118,122,123,124,125,126,127,129,130,131,132,133,134,138,141,142,143,144,146,150,152,156,159,160,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201],$VH1=[5,6,52,53,60,66,67,80,82,88,89,91,94,96,98,106,108,109,110,111,116,118,122,123,124,125,126,127,129,130,131,132,133,134,138,141,142,143,144,146,150,152,156,159,160,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201],$VI1=[5,6,80,152,156,162,164,169,171,173],$VJ1=[1,248],$VK1=[2,198],$VL1=[189,192],$VM1=[5,6,53,60,80,106,146,152,156,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201,211,212,213],$VN1=[2,218],$VO1=[1,253],$VP1=[5,6,80,156,162,164,169,171,173],$VQ1=[1,279],$VR1=[1,287],$VS1=[1,288],$VT1=[1,289],$VU1=[5,6,80,156,164,169,171,173],$VV1=[1,308],$VW1=[1,314],$VX1=[1,315],$VY1=[88,91,94],$VZ1=[5,6,80,164,169,171,173],$V_1=[2,161],$V$1=[1,324],$V02=[1,325],$V12=[5,6,60,80,150,156,162,164,169,171,173],$V22=[2,223],$V32=[1,334],$V42=[78,171],$V52=[5,6,80,169,171,173],$V62=[5,6,80,171,173],$V72=[1,357];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,";":6,"SELECT":7,"distinctOpt":8,"highPriorityOpt":9,"maxStateMentTimeOpt":10,"straightJoinOpt":11,"sqlSmallResultOpt":12,"sqlBigResultOpt":13,"sqlBufferResultOpt":14,"sqlCacheOpt":15,"sqlCalcFoundRowsOpt":16,"selectExprList":17,"selectDataSetOpt":18,"intervalExpr":19,"INTERVAL":20,"intervalNumeric":21,"timePeriod":22,"NUMERIC":23,"EXPONENT_NUMERIC":24,"HEX_NUMERIC":25,"STRING":26,"MICROSECOND":27,"SECOND":28,"MINUTE":29,"HOUR":30,"DAY":31,"WEEK":32,"MONTH":33,"QUARTER":34,"YEAR":35,"SECOND_MICROSECOND":36,"MINUTE_MICROSECOND":37,"MINUTE_SECOND":38,"HOUR_MICROSECOND":39,"HOUR_SECOND":40,"HOUR_MINUTE":41,"DAY_MICROSECOND":42,"DAY_SECOND":43,"DAY_MINUTE":44,"DAY_HOUR":45,"YEAR_MONTH":46,"ALL":47,"DISTINCT":48,"DISTINCTROW":49,"HIGH_PRIORITY":50,"MAX_STATEMENT_TIME":51,"=":52,"STRAIGHT_JOIN":53,"SQL_SMALL_RESULT":54,"SQL_BIG_RESULT":55,"SQL_BUFFER_RESULT":56,"SQL_CACHE":57,"SQL_NO_CACHE":58,"SQL_CALC_FOUND_ROWS":59,",":60,"selectExpr":61,"*":62,"SELECT_EXPR_STAR":63,"expr":64,"selectExprAliasOpt":65,"AS":66,"IDENTIFIER":67,"string":68,"QUOTED_IDENTIFIER":69,"number":70,"boolean":71,"TRUE":72,"FALSE":73,"null":74,"NULL":75,"literal":76,"function_call":77,"(":78,"function_call_param_list":79,")":80,"function_call_param":81,"FROM":82,"identifier":83,"DOT":84,"identifier_list":85,"case_expr_opt":86,"when_then_list":87,"WHEN":88,"THEN":89,"case_when_else":90,"ELSE":91,"case_when":92,"CASE":93,"END":94,"simple_expr_prefix":95,"+":96,"simple_expr":97,"-":98,"~":99,"!":100,"BINARY":101,"expr_list":102,"ROW":103,"EXISTS":104,"{":105,"}":106,"bit_expr":107,"|":108,"&":109,"<<":110,">>":111,"/":112,"DIV":113,"MOD":114,"%":115,"^":116,"not_opt":117,"NOT":118,"escape_opt":119,"ESCAPE":120,"predicate":121,"IN":122,"BETWEEN":123,"AND":124,"SOUNDS":125,"LIKE":126,"REGEXP":127,"comparison_operator":128,">=":129,">":130,"<=":131,"<":132,"<>":133,"!=":134,"sub_query_data_set_opt":135,"ANY":136,"boolean_primary":137,"IS":138,"boolean_extra":139,"UNKNOWN":140,"&&":141,"||":142,"OR":143,"XOR":144,"where_opt":145,"WHERE":146,"group_by_opt":147,"group_by":148,"roll_up_opt":149,"WITH":150,"ROLLUP":151,"GROUP_BY":152,"group_by_order_by_item_list":153,"order_by_opt":154,"order_by":155,"ORDER_BY":156,"group_by_order_by_item":157,"sort_opt":158,"ASC":159,"DESC":160,"having_opt":161,"HAVING":162,"limit":163,"LIMIT":164,"OFFSET":165,"limit_opt":166,"procedure_opt":167,"procedure":168,"PROCEDURE":169,"for_update_lock_in_share_mode_opt":170,"FOR":171,"UPDATE":172,"LOCK":173,"SHARE":174,"MODE":175,"table_refrences":176,"partitionOpt":177,"escaped_table_reference":178,"table_reference":179,"OJ":180,"join_inner_cross":181,"INNER":182,"CROSS":183,"FULL":184,"left_right":185,"LEFT":186,"RIGHT":187,"out_opt":188,"OUTER":189,"left_right_out_opt":190,"join_table":191,"JOIN":192,"table_factor":193,"join_condition":194,"on_join_condition":195,"NATURAL":196,"join_condition_opt":197,"ON":198,"USING":199,"partition_names":200,"PARTITION":201,"aliasOpt":202,"index_or_key":203,"INDEX":204,"KEY":205,"for_opt":206,"identifier_list_opt":207,"index_hint_list_opt":208,"index_hint_list":209,"index_hint":210,"USE":211,"IGNORE":212,"FORCE":213,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:";",7:"SELECT",20:"INTERVAL",23:"NUMERIC",24:"EXPONENT_NUMERIC",25:"HEX_NUMERIC",26:"STRING",27:"MICROSECOND",28:"SECOND",29:"MINUTE",30:"HOUR",31:"DAY",32:"WEEK",33:"MONTH",34:"QUARTER",35:"YEAR",36:"SECOND_MICROSECOND",37:"MINUTE_MICROSECOND",38:"MINUTE_SECOND",39:"HOUR_MICROSECOND",40:"HOUR_SECOND",41:"HOUR_MINUTE",42:"DAY_MICROSECOND",43:"DAY_SECOND",44:"DAY_MINUTE",45:"DAY_HOUR",46:"YEAR_MONTH",47:"ALL",48:"DISTINCT",49:"DISTINCTROW",50:"HIGH_PRIORITY",51:"MAX_STATEMENT_TIME",52:"=",53:"STRAIGHT_JOIN",54:"SQL_SMALL_RESULT",55:"SQL_BIG_RESULT",56:"SQL_BUFFER_RESULT",57:"SQL_CACHE",58:"SQL_NO_CACHE",59:"SQL_CALC_FOUND_ROWS",60:",",62:"*",63:"SELECT_EXPR_STAR",66:"AS",67:"IDENTIFIER",69:"QUOTED_IDENTIFIER",72:"TRUE",73:"FALSE",75:"NULL",78:"(",80:")",82:"FROM",84:"DOT",88:"WHEN",89:"THEN",91:"ELSE",93:"CASE",94:"END",96:"+",98:"-",99:"~",100:"!",101:"BINARY",103:"ROW",104:"EXISTS",105:"{",106:"}",108:"|",109:"&",110:"<<",111:">>",112:"/",113:"DIV",114:"MOD",115:"%",116:"^",118:"NOT",120:"ESCAPE",122:"IN",123:"BETWEEN",124:"AND",125:"SOUNDS",126:"LIKE",127:"REGEXP",129:">=",130:">",131:"<=",132:"<",133:"<>",134:"!=",136:"ANY",138:"IS",140:"UNKNOWN",141:"&&",142:"||",143:"OR",144:"XOR",146:"WHERE",150:"WITH",151:"ROLLUP",152:"GROUP_BY",156:"ORDER_BY",159:"ASC",160:"DESC",162:"HAVING",164:"LIMIT",165:"OFFSET",169:"PROCEDURE",171:"FOR",172:"UPDATE",173:"LOCK",174:"SHARE",175:"MODE",180:"OJ",182:"INNER",183:"CROSS",184:"FULL",186:"LEFT",187:"RIGHT",189:"OUTER",192:"JOIN",196:"NATURAL",198:"ON",199:"USING",201:"PARTITION",204:"INDEX",205:"KEY",211:"USE",212:"IGNORE",213:"FORCE"},
productions_: [0,[3,2],[3,3],[4,12],[19,3],[21,1],[21,1],[21,1],[21,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[8,1],[8,1],[8,1],[8,0],[9,1],[9,0],[10,3],[10,0],[11,1],[11,0],[12,1],[12,0],[13,1],[13,0],[14,1],[14,0],[15,0],[15,1],[15,1],[16,1],[16,0],[17,3],[17,1],[61,1],[61,1],[61,2],[65,0],[65,2],[65,1],[68,1],[68,1],[70,1],[70,1],[70,1],[71,1],[71,1],[74,1],[76,1],[76,1],[76,1],[76,1],[77,4],[79,3],[79,1],[81,0],[81,1],[81,1],[81,2],[81,3],[81,3],[81,1],[81,3],[83,1],[83,3],[85,1],[85,3],[86,0],[86,1],[87,4],[87,5],[90,0],[90,2],[92,5],[95,2],[95,2],[95,2],[95,2],[95,2],[97,1],[97,1],[97,1],[97,1],[97,1],[97,3],[97,4],[97,3],[97,4],[97,4],[97,1],[107,1],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[117,0],[117,1],[119,0],[119,2],[121,1],[121,6],[121,6],[121,6],[121,4],[121,5],[121,4],[128,1],[128,1],[128,1],[128,1],[128,1],[128,1],[128,1],[135,1],[135,1],[137,1],[137,4],[137,3],[137,6],[139,1],[139,1],[64,1],[64,4],[64,2],[64,3],[64,3],[64,3],[64,3],[64,3],[102,1],[102,3],[145,0],[145,2],[147,0],[147,1],[149,0],[149,2],[148,3],[154,0],[154,1],[155,3],[153,1],[153,3],[157,2],[158,0],[158,1],[158,1],[161,0],[161,2],[163,2],[163,4],[163,4],[166,0],[166,1],[167,0],[167,1],[168,2],[170,0],[170,2],[170,4],[18,0],[18,10],[176,1],[176,3],[178,1],[178,4],[181,0],[181,1],[181,1],[181,1],[185,1],[185,1],[188,0],[188,1],[190,0],[190,2],[191,4],[191,5],[191,4],[191,6],[191,5],[197,0],[197,1],[195,2],[194,1],[194,4],[179,1],[179,1],[200,1],[200,3],[177,0],[177,4],[202,0],[202,2],[202,1],[203,1],[203,1],[206,0],[206,2],[206,2],[206,2],[207,0],[207,1],[208,0],[208,1],[209,1],[209,3],[210,6],[210,6],[210,6],[193,4],[193,4],[193,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {nodeType: 'Main', value: $$[$0-1]}; 
break;
case 2:
 return {nodeType: 'Main', value: $$[$0-2], hasSemicolon: true}; 
break;
case 3:

        this.$ = {
          type: 'Select',
          distinctOpt: $$[$0-10],
          highPriorityOpt: $$[$0-9],
          maxStateMentTimeOpt: $$[$0-8],
          straightJoinOpt: $$[$0-7],
          sqlSmallResultOpt: $$[$0-6],
          sqlBigResultOpt: $$[$0-5],
          sqlBufferResultOpt: $$[$0-4],
          sqlCacheOpt: $$[$0-3],
          sqlCalcFoundRowsOpt: $$[$0-2],
          selectItems: $$[$0-1],
          from: $$[$0].from,
          partition: $$[$0].partition,
          where: $$[$0].where,
          groupBy: $$[$0].groupBy,
          having: $$[$0].having,
          orderBy: $$[$0].orderBy,
          limit: $$[$0].limit,
          procedure: $$[$0].procedure,
          updateLockMode: $$[$0].updateLockMode
        }
      
break;
case 4:
 this.$ = { type: 'Interval', duration: $$[$0-1], period: $$[$0] } 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 33: case 35: case 37: case 39: case 41: case 43: case 46: case 47: case 48: case 66: case 67: case 68: case 69: case 74: case 75: case 79: case 86: case 90: case 97: case 98: case 99: case 100: case 101: case 107: case 108: case 122: case 124: case 125: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 145: case 147: case 158: case 160: case 165: case 171: case 172: case 174: case 179: case 181: case 182: case 193: case 194: case 195: case 196: case 197: case 199: case 208: case 210: case 212: case 213: case 221: case 222: case 228: case 230:
 this.$ = $$[$0] 
break;
case 32: case 34: case 36: case 38: case 40: case 42: case 44: case 45: case 49: case 73: case 85: case 89: case 121: case 123: case 157: case 159: case 161: case 164: case 170: case 173: case 178: case 180: case 183: case 192: case 198: case 207: case 216: case 223: case 227: case 229:
 this.$ = null 
break;
case 50:
 $$[$0-2].value.push($$[$0]); 
break;
case 51:
 this.$ = { type: 'SelectExpr', value: [ $$[$0] ] } 
break;
case 52: case 53: case 81:
 this.$ = { type: 'Identifier', value: $$[$0] } 
break;
case 54:
 this.$ = $$[$0-1]; this.$.alias = $$[$0].alias; this.$.hasAs = $$[$0].hasAs; 
break;
case 55: case 218:
 this.$ = {alias: null, hasAs: null} 
break;
case 56:
 this.$ = {alias: $$[$0], hasAs: true} 
break;
case 57:
 this.$ = {alias: $$[$0], hasAs: false} 
break;
case 58: case 59:
 this.$ = { type: 'String', value: $$[$0] } 
break;
case 60: case 61: case 62:
 this.$ = { type: 'Number', value: $$[$0] } 
break;
case 63:
 this.$ = { type: 'Boolean', value: 'TRUE' } 
break;
case 64:
 this.$ = { type: 'Boolean', value: 'FALSE' } 
break;
case 65:
 this.$ = { type: 'Null', value: 'null' } 
break;
case 70:
 this.$ = {type: 'FunctionCall', name: $$[$0-3], params: $$[$0-1]} 
break;
case 71:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 72:
 this.$ = [$$[$0]]; 
break;
case 76:
 this.$ = { type: 'FunctionCallParam', distinctOpt: $$[$0-1], value: $$[$0] } 
break;
case 77:
 this.$ = { type: 'FromCallParam', left: $$[$0-2], right: $$[$0] } 
break;
case 78:
 this.$ = { type: 'TimePeriodFromCallParam', left: $$[$0-2], right: $$[$0] } 
break;
case 80:
 this.$ = { type: 'ASExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 82:
 this.$ = $$[$0-2]; $$[$0-2].value += '.' + $$[$0] 
break;
case 83:
 this.$ = { type: 'IdentifierList', value: [ $$[$0] ] } 
break;
case 84: case 189:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]); 
break;
case 87:
 this.$ = { type: 'WhenThenList', value: [ { when: $$[$0-2], then: $$[$0] } ] }; 
break;
case 88:
 this.$ = $$[$0-4]; this.$.value.push({ when: $$[$0-2], then: $$[$0] }); 
break;
case 91:
 this.$ = { type: 'CaseWhen', caseExprOpt: $$[$0-3], whenThenList: $$[$0-2], else: $$[$0-1] } 
break;
case 92: case 93: case 94: case 95: case 96:
 this.$ = { type: 'Prefix', prefix: $$[$0-1], value: $$[$0] } 
break;
case 102:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-1] } 
break;
case 103:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-2], hasRow: true } 
break;
case 104:
 this.$ = { type: 'SubQuery', value: $$[$0-1] } 
break;
case 105:
 this.$ = { type: 'SubQuery', value: $$[$0-1], hasExists: true } 
break;
case 106:
 this.$ = { type: 'IdentifierExpr', identifier: $$[$0-2], value: $$[$0-1] } 
break;
case 109:
 this.$ = { type: 'BitExpression', operator: '|', left: $$[$0-2], right: $$[$0] } 
break;
case 110:
 this.$ = { type: 'BitExpression', operator: '&', left: $$[$0-2], right: $$[$0] } 
break;
case 111:
 this.$ = { type: 'BitExpression', operator: '<<', left: $$[$0-2], right: $$[$0] } 
break;
case 112:
 this.$ = { type: 'BitExpression', operator: '>>', left: $$[$0-2], right: $$[$0] } 
break;
case 113:
 this.$ = { type: 'BitExpression', operator: '+', left: $$[$0-2], right: $$[$0] } 
break;
case 114:
 this.$ = { type: 'BitExpression', operator: '-', left: $$[$0-2], right: $$[$0] } 
break;
case 115:
 this.$ = { type: 'BitExpression', operator: '*', left: $$[$0-2], right: $$[$0] } 
break;
case 116:
 this.$ = { type: 'BitExpression', operator: '/', left: $$[$0-2], right: $$[$0] } 
break;
case 117:
 this.$ = { type: 'BitExpression', operator: 'DIV', left: $$[$0-2], right: $$[$0] } 
break;
case 118:
 this.$ = { type: 'BitExpression', operator: 'MOD', left: $$[$0-2], right: $$[$0] } 
break;
case 119:
 this.$ = { type: 'BitExpression', operator: '%', left: $$[$0-2], right: $$[$0] } 
break;
case 120:
 this.$ = { type: 'BitExpression', operator: '^', left: $$[$0-2], right: $$[$0] } 
break;
case 126:
 this.$ = { type: 'InSubQueryPredicate', hasNot: $$[$0-4], left: $$[$0-5] ,right: $$[$0-1] } 
break;
case 127:
 this.$ = { type: 'InExpressionListPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: $$[$0-1] } 
break;
case 128:
 this.$ = { type: 'BetweenPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: { left: $$[$0-2], right: $$[$0] } } 
break;
case 129:
 this.$ = { type: 'SoundsLikePredicate', hasNot: false, left: $$[$0-3], right: $$[$0] } 
break;
case 130:
 this.$ = { type: 'LikePredicate', hasNot: $$[$0-3], left: $$[$0-4], right: $$[$0-1], escape: $$[$0] } 
break;
case 131:
 this.$ = { type: 'RegexpPredicate', hasNot: $$[$0-2], left: $$[$0-3], right: $$[$0] } 
break;
case 142:
 this.$ = { type: 'IsNullBooleanPrimary', hasNot: $$[$0-1] , value: $$[$0-3] } 
break;
case 143:
 this.$ = { type: 'ComparisonBooleanPrimary', left: $$[$0-2], operator: $$[$0-1], right: $$[$0] } 
break;
case 144:
 this.$ = { type: 'ComparisonSubQueryBooleanPrimary', operator: $$[$0-4], subQueryOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1] } 
break;
case 146:
 this.$ = { type: 'BooleanExtra', value: $$[$0] } 
break;
case 148:
 this.$ = { type: 'IsExpression', hasNot: $$[$0-1], left: $$[$0-3], right: $$[$0] } 
break;
case 149:
 this.$ = { type: 'NotExpression', value: $$[$0] } 
break;
case 150: case 153:
 this.$ = { type: 'AndExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 151: case 152:
 this.$ = { type: 'OrExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 154:
 this.$ = { type: 'XORExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 155:
 this.$ = { type: 'ExpressionList', value: [ $$[$0] ] } 
break;
case 156: case 232:
 this.$ = $$[$0-2]; this.$.value.push($$[$0]); 
break;
case 162:
 this.$ = true 
break;
case 163:
 this.$ = { type: 'GroupBy', value: $$[$0-1], rollUp: $$[$0] } 
break;
case 166:
 this.$ = { type: 'OrderBy', value: $$[$0-1], rollUp: $$[$0] } 
break;
case 167: case 214:
 this.$ = [ $$[$0] ] 
break;
case 168:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 169:
 this.$ = { type: 'GroupByOrderByItem', value: $$[$0-1], sortOpt: $$[$0] } 
break;
case 175:
 this.$ = { type: 'Limit', value: [ $$[$0] ] } 
break;
case 176:
 this.$ = { type: 'Limit', value: [ $$[$0-2], $$[$0] ] } 
break;
case 177:
 this.$ = { type: 'Limit', value: [ $$[$0], $$[$0-2] ], offsetMode: true } 
break;
case 184:
 this.$ = $$[$0-1] + ' ' + $$[$0] 
break;
case 185:
 this.$ = $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0] 
break;
case 186:
 this.$ = {} 
break;
case 187:
 this.$ = { from: $$[$0-8], partition: $$[$0-7], where: $$[$0-6], groupBy: $$[$0-5], having: $$[$0-4], orderBy: $$[$0-3], limit: $$[$0-2], procedure: $$[$0-1], updateLockMode: $$[$0] } 
break;
case 188:
 this.$ = { type: 'TableRefrences', value: [ $$[$0] ] } 
break;
case 190:
 this.$ = { type: 'TableRefrence', value: $$[$0] } 
break;
case 191:
 this.$ = { type: 'TableRefrence', hasOj: true, value: $$[$0-1] } 
break;
case 200:
 this.$ = { leftRight: null, outOpt: null } 
break;
case 201:
 this.$ = { leftRight: $$[$0-1], outOpt: $$[$0] } 
break;
case 202:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-2], left: $$[$0-3], right: $$[$0], condition: null } 
break;
case 203:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-3], left: $$[$0-4], right: $$[$0-1], condition: $$[$0] } 
break;
case 204:
 this.$ = { type: 'StraightJoinTable', left: $$[$0-3], right: $$[$0-1], condition: $$[$0] } 
break;
case 205:
 this.$ = { type: 'LeftRightJoinTable', leftRight: $$[$0-4], outOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1], condition: $$[$0] } 
break;
case 206:
 this.$ = { type: 'NaturalJoinTable', leftRight: $$[$0-2].leftRight, outOpt: $$[$0-2].outOpt, left: $$[$0-4], right: $$[$0] } 
break;
case 209:
 this.$ = { type: 'OnJoinCondition', value: $$[$0] } 
break;
case 211:
 this.$ = { type: 'UsingJoinCondition', value: $$[$0-1] } 
break;
case 215:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]) 
break;
case 217:
 this.$ = { type: 'Partitions', value: $$[$0-1] } 
break;
case 219:
 this.$ = { hasAs: true, alias: $$[$0] } 
break;
case 220:
 this.$ = { hasAs: false, alias: $$[$0] } 
break;
case 224: case 225: case 226:
 this.$ = { type: 'ForOptIndexHint', value: $$[$0] } 
break;
case 231:
 this.$ = { type: 'IndexHintList', value: [ $$[$0] ] } 
break;
case 233:
 this.$ = { type: 'UseIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 234:
 this.$ = { type: 'IgnoreIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 235:
 this.$ = { type: 'ForceIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 236:
 this.$ = { type: 'TableFactor', value: $$[$0-3], partition: $$[$0-2], alias: $$[$0-1].alias, hasAs: $$[$0-1].hasAs, indexHintOpt: $$[$0] } 
break;
case 237:
 this.$ = { type: 'SubQuery', value: $$[$0-2], alias: $$[$0].alias, hasAs: $$[$0].hasAs } 
break;
case 238:
 this.$ = $$[$0-1]; this.$.hasParentheses = true 
break;
}
},
table: [{3:1,4:2,7:$V0},{1:[3]},{5:[1,4],6:[1,5]},o($V1,[2,32],{8:6,47:[1,7],48:[1,8],49:[1,9]}),{1:[2,1]},{5:[1,10]},o($V2,[2,34],{9:11,50:[1,12]}),o($V1,[2,29]),o($V1,[2,30]),o($V1,[2,31]),{1:[2,2]},o($V3,[2,36],{10:13,51:[1,14]}),o($V2,[2,33]),o($V4,[2,38],{11:15,53:[1,16]}),{52:[1,17]},o($V5,[2,40],{12:18,54:[1,19]}),o($V4,[2,37]),{23:[1,20]},o($V6,[2,42],{13:21,55:[1,22]}),o($V5,[2,39]),o($V3,[2,35]),o($V7,[2,44],{14:23,56:[1,24]}),o($V6,[2,41]),o($V8,[2,45],{15:25,57:[1,26],58:[1,27]}),o($V7,[2,43]),o($V9,[2,49],{16:28,59:[1,29]}),o($V8,[2,46]),o($V8,[2,47]),{17:30,19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,61:31,62:$Vf,63:$Vg,64:34,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},o($V9,[2,48]),o($Vx,[2,186],{18:70,60:[1,71],82:[1,72]}),o($Vy,[2,51]),o($Vy,[2,52]),o($Vy,[2,53]),o($Vy,[2,55],{65:73,66:[1,79],67:[1,80],124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD}),o($VE,[2,147],{128:82,52:[1,83],129:[1,84],130:[1,85],131:[1,86],132:[1,87],133:[1,88],134:[1,89],138:[1,81]}),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:90,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},o($VF,[2,141]),o($VF,[2,125],{117:91,62:$VG,96:$VH,98:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO,114:$VP,115:$VQ,116:$VR,118:$VS,122:$VT,123:$VT,126:$VT,127:$VT,125:[1,92]}),o($VU,[2,108]),o($VV,[2,97]),o($VV,[2,98]),o($VV,[2,99],{84:$VW}),o($VV,[2,100]),o($VV,[2,101]),{4:108,7:$V0,19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:109,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:107,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},{78:[1,110]},{78:[1,111]},{67:$VX,83:112},o($VV,[2,107]),o($VV,[2,66]),o($VV,[2,67]),o($VV,[2,68]),o($VV,[2,69]),{21:114,23:[1,115],24:[1,116],25:[1,117],26:[1,118]},o([5,6,52,53,60,62,66,67,80,82,84,88,89,91,94,96,98,106,108,109,110,111,112,113,114,115,116,118,120,122,123,124,125,126,127,129,130,131,132,133,134,138,141,142,143,144,146,150,152,156,159,160,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201],$VY,{78:$VZ}),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:120,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:121,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:122,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:123,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:124,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:126,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,86:125,88:[2,85],92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},o($VV,[2,58]),o($VV,[2,59]),o($VV,[2,60]),o($VV,[2,61]),o($VV,[2,62]),o($VV,[2,63]),o($VV,[2,64]),o($VV,[2,65]),o($Vx,[2,3]),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,61:127,62:$Vf,63:$Vg,64:34,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},{67:$VX,78:$V_,83:134,105:$V$,176:128,178:129,179:130,191:133,193:132},o($Vy,[2,54]),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:136,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:137,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:138,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:139,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:140,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},{67:[1,141]},o($Vy,[2,57]),o([72,73,75,140],$VT,{117:142,118:$VS}),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,47:[1,145],67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,121:143,135:144,136:[1,146]},o($V01,[2,132]),o($V01,[2,133]),o($V01,[2,134]),o($V01,[2,135]),o($V01,[2,136]),o($V01,[2,137]),o($V01,[2,138]),o($VE,[2,149]),{122:[1,147],123:[1,148],126:[1,149],127:[1,150]},{126:[1,151]},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:152},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:153},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:154},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:155},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:156},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:157},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:158},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:159},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:160},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:161},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:162},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:163},o([72,73,75,122,123,126,127,140],[2,122]),{67:[1,164]},{60:$V11,80:[1,165]},{80:[1,167]},o($V21,[2,155],{124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD}),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:109,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:168,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},{4:169,7:$V0},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:170,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,84:$VW,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},o([5,6,20,23,24,25,26,53,60,66,67,69,72,73,75,78,80,84,93,96,98,99,100,101,103,104,105,106,118,146,152,156,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201,211,212,213],$VY),{22:171,27:$V31,28:$V41,29:$V51,30:$V61,31:$V71,32:$V81,33:$V91,34:$Va1,35:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,39:$Vf1,40:$Vg1,41:$Vh1,42:$Vi1,43:$Vj1,44:$Vk1,45:$Vl1,46:$Vm1},o($Vn1,[2,5]),o($Vn1,[2,6]),o($Vn1,[2,7]),o($Vn1,[2,8]),o($V21,$Vo1,{137:35,121:37,107:38,97:39,76:40,19:41,83:42,77:43,95:44,92:49,68:50,70:51,71:52,74:53,79:192,81:193,64:197,22:198,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$V31,28:$V41,29:$V51,30:$V61,31:$V71,32:$V81,33:$V91,34:$Va1,35:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,39:$Vf1,40:$Vg1,41:$Vh1,42:$Vi1,43:$Vj1,44:$Vk1,45:$Vl1,46:$Vm1,48:$Vp1,62:$Vq1,63:$Vr1,67:$Vh,69:$Vi,72:$Vj,73:$Vk,75:$Vl,78:$Vm,93:$Vn,96:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,118:$Vw}),o($VV,[2,92]),o($VV,[2,93]),o($VV,[2,94]),o($VV,[2,95]),o($VV,[2,96]),{87:199,88:[1,200]},{88:[2,86],124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD},o($Vy,[2,50]),o([5,6,80,146,152,156,162,164,169,171,173],$Vs1,{177:201,60:$Vt1,201:$Vu1}),o($Vv1,[2,188]),o($Vv1,[2,190],{181:204,185:206,53:$Vw1,182:$Vx1,183:$Vy1,184:$Vz1,186:$VA1,187:$VB1,192:$VC1,196:$VD1}),{180:[1,213]},o($VE1,[2,212]),o($VE1,[2,213]),o([5,6,53,60,66,67,80,106,146,152,156,162,164,169,171,173,182,183,184,186,187,192,196,198,199,211,212,213],$Vs1,{177:214,84:$VW,201:$Vu1}),{4:215,7:$V0,67:$VX,78:$V_,83:134,105:$V$,176:216,178:129,179:130,191:133,193:132},o($VE,[2,150]),o($VF1,[2,151],{124:$Vz,141:$VA}),o($VF1,[2,152],{124:$Vz,141:$VA}),o($VE,[2,153]),o($VF1,[2,154],{124:$Vz,141:$VA}),o($Vy,[2,56]),{71:219,72:$Vj,73:$Vk,75:[1,218],139:217,140:[1,220]},o($VF,[2,143]),{78:[1,221]},{78:[2,139]},{78:[2,140]},{78:[1,222]},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:223},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:224,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:225},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:226},o([5,6,52,53,60,66,67,80,82,88,89,91,94,106,108,118,122,123,124,125,126,127,129,130,131,132,133,134,138,141,142,143,144,146,150,152,156,159,160,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201],[2,109],{62:$VG,96:$VH,98:$VI,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO,114:$VP,115:$VQ,116:$VR}),o([5,6,52,53,60,66,67,80,82,88,89,91,94,106,108,109,116,118,122,123,124,125,126,127,129,130,131,132,133,134,138,141,142,143,144,146,150,152,156,159,160,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201],[2,110],{62:$VG,96:$VH,98:$VI,110:$VL,111:$VM,112:$VN,113:$VO,114:$VP,115:$VQ}),o($VG1,[2,111],{62:$VG,96:$VH,98:$VI,112:$VN,113:$VO,114:$VP,115:$VQ}),o($VG1,[2,112],{62:$VG,96:$VH,98:$VI,112:$VN,113:$VO,114:$VP,115:$VQ}),o($VH1,[2,113],{62:$VG,112:$VN,113:$VO,114:$VP,115:$VQ}),o($VH1,[2,114],{62:$VG,112:$VN,113:$VO,114:$VP,115:$VQ}),o($VU,[2,115]),o($VU,[2,116]),o($VU,[2,117]),o($VU,[2,118]),o($VU,[2,119]),o([5,6,52,53,60,66,67,80,82,88,89,91,94,106,108,116,118,122,123,124,125,126,127,129,130,131,132,133,134,138,141,142,143,144,146,150,152,156,159,160,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201],[2,120],{62:$VG,96:$VH,98:$VI,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO,114:$VP,115:$VQ}),o([5,6,20,23,24,25,26,52,53,60,62,66,67,69,72,73,75,78,80,82,84,88,89,91,93,94,96,98,99,100,101,103,104,105,106,108,109,110,111,112,113,114,115,116,118,120,122,123,124,125,126,127,129,130,131,132,133,134,138,141,142,143,144,146,150,152,156,159,160,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201,211,212,213],[2,82]),o($VV,[2,102]),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:227,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},o($VV,[2,104]),{60:$V11,80:[1,228]},{80:[1,229]},{106:[1,230],124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD},o($VV,[2,4]),o($VV,[2,9]),o($VV,[2,10]),o($VV,[2,11]),o($VV,[2,12]),o($VV,[2,13]),o($VV,[2,14]),o($VV,[2,15]),o($VV,[2,16]),o($VV,[2,17]),o($VV,[2,18]),o($VV,[2,19]),o($VV,[2,20]),o($VV,[2,21]),o($VV,[2,22]),o($VV,[2,23]),o($VV,[2,24]),o($VV,[2,25]),o($VV,[2,26]),o($VV,[2,27]),o($VV,[2,28]),{60:[1,232],80:[1,231]},o($V21,[2,72]),o($V21,[2,74]),o($V21,[2,75]),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:233,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},o($V21,[2,79],{66:[1,235],82:[1,234],124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD}),{82:[1,236]},{88:[1,238],90:237,91:[1,239],94:[2,89]},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:240,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},o($VI1,[2,157],{145:241,146:[1,242]}),{67:$VX,78:$V_,83:134,105:$V$,178:243,179:130,191:133,193:132},{78:[1,244]},{192:[1,245]},{67:$VX,78:$V_,83:134,193:246},{188:247,189:$VJ1,192:$VK1},{185:250,186:$VA1,187:$VB1,190:249,192:[2,200]},{192:[2,193]},{192:[2,194]},{192:[2,195]},o($VL1,[2,196]),o($VL1,[2,197]),{67:$VX,78:$V_,83:134,179:251,191:133,193:132},o($VM1,$VN1,{202:252,83:254,66:$VO1,67:$VX}),{80:[1,255]},{60:$Vt1,80:[1,256]},o($VE,[2,148]),o($VF,[2,142]),o($VE,[2,145]),o($VE,[2,146]),{4:257,7:$V0},{4:258,7:$V0,19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:109,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:259,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},{62:$VG,96:$VH,98:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO,114:$VP,115:$VQ,116:$VR,124:[1,260]},o($VF,[2,123],{119:261,120:[1,262]}),o($VF,[2,131],{62:$VG,96:$VH,98:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO,114:$VP,115:$VQ,116:$VR}),o($VF,[2,129],{62:$VG,96:$VH,98:$VI,108:$VJ,109:$VK,110:$VL,111:$VM,112:$VN,113:$VO,114:$VP,115:$VQ,116:$VR}),o($V21,[2,156],{124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD}),o($VV,[2,103]),o($VV,[2,105]),o($VV,[2,106]),o($VV,[2,70]),o($V21,$Vo1,{137:35,121:37,107:38,97:39,76:40,19:41,83:42,77:43,95:44,92:49,68:50,70:51,71:52,74:53,64:197,22:198,81:263,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$V31,28:$V41,29:$V51,30:$V61,31:$V71,32:$V81,33:$V91,34:$Va1,35:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,39:$Vf1,40:$Vg1,41:$Vh1,42:$Vi1,43:$Vj1,44:$Vk1,45:$Vl1,46:$Vm1,48:$Vp1,62:$Vq1,63:$Vr1,67:$Vh,69:$Vi,72:$Vj,73:$Vk,75:$Vl,78:$Vm,93:$Vn,96:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,118:$Vw}),o($V21,[2,76],{124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD}),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:264,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:265,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:266,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},{94:[1,267]},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:268,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:269,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},{89:[1,270],124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD},o($VP1,[2,159],{147:271,148:272,152:[1,273]}),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:274,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},o($Vv1,[2,189]),{67:$VX,83:276,200:275},{67:$VX,78:$V_,83:134,193:277},{195:278,198:$VQ1},{192:[1,280]},{192:[2,199]},{192:[1,281]},{188:282,189:$VJ1,192:$VK1},{53:$Vw1,106:[1,283],181:204,182:$Vx1,183:$Vy1,184:$Vz1,185:206,186:$VA1,187:$VB1,192:$VC1,196:$VD1},o($VE1,[2,229],{208:284,209:285,210:286,211:$VR1,212:$VS1,213:$VT1}),{67:$VX,83:290},o($VM1,[2,220],{84:$VW}),o($VE1,$VN1,{83:254,202:291,66:$VO1,67:$VX}),o($VE1,[2,238]),{80:[1,292]},{80:[1,293]},{60:$V11,80:[1,294]},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,121:295},o($VF,[2,130]),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:296,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv},o($V21,[2,71]),o($V21,[2,77],{124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD}),o($V21,[2,80],{124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD}),o($V21,[2,78],{124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD}),o($VV,[2,91]),{89:[1,297],124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD},{94:[2,90],124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD},{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:298,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},o($VU1,[2,173],{161:299,162:[1,300]}),o($VP1,[2,160]),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:303,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35,153:301,157:302},o($VI1,[2,158],{124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD}),{60:[1,305],80:[1,304]},o($V21,[2,214],{84:$VW}),o([5,6,53,60,80,106,146,152,156,162,164,169,171,173,182,183,184,186,187,192,196,201],[2,202],{194:306,195:307,198:$VQ1,199:$VV1}),o($VE1,[2,204]),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:309,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},{67:$VX,78:$V_,83:134,179:310,191:133,193:132},{67:$VX,78:$V_,83:134,193:311},{192:[2,201]},o($Vv1,[2,191]),o($VE1,[2,236]),o($VE1,[2,230]),o($VE1,[2,231]),{203:313,204:$VW1,205:$VX1},{203:316,204:$VW1,205:$VX1},{203:317,204:$VW1,205:$VX1},o($VM1,[2,219],{84:$VW}),o($VE1,[2,237]),o($VF,[2,144]),o($VF,[2,126]),o($VF,[2,127]),o($VF,[2,128]),o($VF,[2,124]),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:318,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},o($VY1,[2,87],{124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD}),o($VZ1,[2,164],{154:319,155:320,156:[1,321]}),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:322,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35},o($VP1,$V_1,{149:323,60:$V$1,150:$V02}),o($V12,[2,167]),o($V12,[2,170],{158:326,124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD,159:[1,327],160:[1,328]}),o([5,6,53,60,66,67,80,106,146,152,156,162,164,169,171,173,182,183,184,186,187,192,196,198,199,201,211,212,213],[2,217]),{67:$VX,83:329},o($VE1,[2,203]),o($VE1,[2,210]),{78:[1,330]},o($VE1,[2,209],{124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD}),{53:$Vw1,181:204,182:$Vx1,183:$Vy1,184:$Vz1,185:206,186:$VA1,187:$VB1,192:$VC1,194:331,195:307,196:$VD1,198:$VQ1,199:$VV1},o($VE1,[2,206]),{210:332,211:$VR1,212:$VS1,213:$VT1},{78:$V22,171:$V32,206:333},o($V42,[2,221]),o($V42,[2,222]),{78:$V22,171:$V32,206:335},{78:$V22,171:$V32,206:336},o($VY1,[2,88],{124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD}),o($V52,[2,178],{166:337,163:338,164:[1,339]}),o($VZ1,[2,165]),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:303,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35,153:340,157:302},o($VU1,[2,174],{124:$Vz,141:$VA,142:$VB,143:$VC,144:$VD}),o($VP1,[2,163]),{19:41,20:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,64:303,67:$Vh,68:50,69:$Vi,70:51,71:52,72:$Vj,73:$Vk,74:53,75:$Vl,76:40,77:43,78:$Vm,83:42,92:49,93:$Vn,95:44,96:$Vo,97:39,98:$Vp,99:$Vq,100:$Vr,101:$Vs,103:$Vt,104:$Vu,105:$Vv,107:38,118:$Vw,121:37,137:35,157:341},{151:[1,342]},o($V12,[2,169]),o($V12,[2,171]),o($V12,[2,172]),o($V21,[2,215],{84:$VW}),{67:$VX,83:344,85:343},o($VE1,[2,205]),o($VE1,[2,232]),{78:[1,345]},{152:[1,348],156:[1,347],192:[1,346]},{78:[1,349]},{78:[1,350]},o($V62,[2,180],{167:351,168:352,169:[1,353]}),o($V52,[2,179]),{23:[1,354]},o($VZ1,$V_1,{149:355,60:$V$1,150:$V02}),o($V12,[2,168]),o($VP1,[2,162]),{60:$V72,80:[1,356]},o($V21,[2,83],{84:$VW}),{67:$VX,80:[2,227],83:344,85:359,207:358},{78:[2,224]},{78:[2,225]},{78:[2,226]},{67:$VX,83:344,85:360},{67:$VX,83:344,85:361},o($Vx,[2,183],{170:362,171:[1,363],173:[1,364]}),o($V62,[2,181]),{67:[1,366],77:365},o($V52,[2,175],{60:[1,367],165:[1,368]}),o($VZ1,[2,166]),o($VE1,[2,211]),{67:$VX,83:369},{80:[1,370]},{60:$V72,80:[2,228]},{60:$V72,80:[1,371]},{60:$V72,80:[1,372]},o($Vx,[2,187]),{172:[1,373]},{122:[1,374]},o($V62,[2,182]),{78:$VZ},{23:[1,375]},{23:[1,376]},o($V21,[2,84],{84:$VW}),o($VE1,[2,233]),o($VE1,[2,234]),o($VE1,[2,235]),o($Vx,[2,184]),{174:[1,377]},o($V52,[2,176]),o($V52,[2,177]),{175:[1,378]},o($Vx,[2,185])],
defaultActions: {4:[2,1],10:[2,2],145:[2,139],146:[2,140],208:[2,193],209:[2,194],210:[2,195],248:[2,199],282:[2,201],346:[2,224],347:[2,225],348:[2,226]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip sql comments */
break;
case 2:/* skip sql comments */
break;
case 3:/* skip whitespace */
break;
case 4:return 67
break;
case 5:return 67
break;
case 6:return 67
break;
case 7:return 7
break;
case 8:return 47
break;
case 9:return 136
break;
case 10:return 48
break;
case 11:return 49
break;
case 12:return 50
break;
case 13:return 51
break;
case 14:return 53
break;
case 15:return 54
break;
case 16:return 55
break;
case 17:return 56
break;
case 18:return 57
break;
case 19:return 58
break;
case 20:return 59
break;
case 21:return 63
break;
case 22:return 66
break;
case 23:return 72
break;
case 24:return 73
break;
case 25:return 75
break;
case 26:return 'COLLATE'
break;
case 27:return 101
break;
case 28:return 103
break;
case 29:return 104
break;
case 30:return 93
break;
case 31:return 88
break;
case 32:return 89
break;
case 33:return 91
break;
case 34:return 94
break;
case 35:return 113
break;
case 36:return 114
break;
case 37:return 118
break;
case 38:return 123
break;
case 39:return 122
break;
case 40:return 125
break;
case 41:return 126
break;
case 42:return 120
break;
case 43:return 127
break;
case 44:return 138
break;
case 45:return 140
break;
case 46:return 124
break;
case 47:return 143
break;
case 48:return 20
break;
case 49:return 144
break;
case 50:return 82
break;
case 51:return 201
break;
case 52:return 211
break;
case 53:return 204
break;
case 54:return 205
break;
case 55:return 171
break;
case 56:return 192
break;
case 57:return 156
break;
case 58:return 152
break;
case 59:return 212
break;
case 60:return 213
break;
case 61:return 182
break;
case 62:return 183
break;
case 63:return 184
break;
case 64:return 198
break;
case 65:return 199
break;
case 66:return 186
break;
case 67:return 187
break;
case 68:return 189
break;
case 69:return 196
break;
case 70:return 146
break;
case 71:return 159
break;
case 72:return 160
break;
case 73:return 150
break;
case 74:return 151
break;
case 75:return 162
break;
case 76:return 165
break;
case 77:return 169
break;
case 78:return 172
break;
case 79:return 173
break;
case 80:return 174
break;
case 81:return 175
break;
case 82:return 180
break;
case 83:return 164
break;
case 84:return 27
break;
case 85:return 28
break;
case 86:return 29
break;
case 87:return 30
break;
case 88:return 31
break;
case 89:return 32
break;
case 90:return 33
break;
case 91:return 34
break;
case 92:return 35
break;
case 93:return 36
break;
case 94:return 37
break;
case 95:return 38
break;
case 96:return 39
break;
case 97:return 40
break;
case 98:return 41
break;
case 99:return 42
break;
case 100:return 43
break;
case 101:return 44
break;
case 102:return 45
break;
case 103:return 46
break;
case 104:return 60
break;
case 105:return 52
break;
case 106:return 78
break;
case 107:return 80
break;
case 108:return 99
break;
case 109:return 134
break;
case 110:return 100
break;
case 111:return 108
break;
case 112:return 109
break;
case 113:return 96
break;
case 114:return 98
break;
case 115:return 62
break;
case 116:return 112
break;
case 117:return 115
break;
case 118:return 116
break;
case 119:return 111
break;
case 120:return 129
break;
case 121:return 130
break;
case 122:return 110
break;
case 123:return '<=>'
break;
case 124:return 131
break;
case 125:return 133
break;
case 126:return 132
break;
case 127:return 105
break;
case 128:return 106
break;
case 129:return 6
break;
case 130:return 26
break;
case 131:return 26
break;
case 132:return 25
break;
case 133:return 23
break;
case 134:return 24
break;
case 135:return 67
break;
case 136:return 84
break;
case 137:return 69
break;
case 138:return 5
break;
case 139:return 'INVALID'
break;
}
},
rules: [/^(?:[/][*](.|\n)*?[*][/])/i,/^(?:[-][-]\s.*\n)/i,/^(?:[#]\s.*\n)/i,/^(?:\s+)/i,/^(?:["](?:[^"\\]|\\.)*["])/i,/^(?:[`](?:[^`\\]|\\.)*[`])/i,/^(?:[\u4e00-\u9fa5][0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:SELECT\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:DISTINCT\b)/i,/^(?:DISTINCTROW\b)/i,/^(?:HIGH_PRIORITY\b)/i,/^(?:MAX_STATEMENT_TIME\b)/i,/^(?:STRAIGHT_JOIN\b)/i,/^(?:SQL_SMALL_RESULT\b)/i,/^(?:SQL_BIG_RESULT\b)/i,/^(?:SQL_BUFFER_RESULT\b)/i,/^(?:SQL_CACHE\b)/i,/^(?:SQL_NO_CACHE\b)/i,/^(?:SQL_CALC_FOUND_ROWS\b)/i,/^(?:([a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]+\.){1,2}\*)/i,/^(?:AS\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:COLLATE\b)/i,/^(?:BINARY\b)/i,/^(?:ROW\b)/i,/^(?:EXISTS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:DIV\b)/i,/^(?:MOD\b)/i,/^(?:NOT\b)/i,/^(?:BETWEEN\b)/i,/^(?:IN\b)/i,/^(?:SOUNDS\b)/i,/^(?:LIKE\b)/i,/^(?:ESCAPE\b)/i,/^(?:REGEXP\b)/i,/^(?:IS\b)/i,/^(?:UNKNOWN\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:INTERVAL\b)/i,/^(?:XOR\b)/i,/^(?:FROM\b)/i,/^(?:PARTITION\b)/i,/^(?:USE\b)/i,/^(?:INDEX\b)/i,/^(?:KEY\b)/i,/^(?:FOR\b)/i,/^(?:JOIN\b)/i,/^(?:ORDER\s+BY\b)/i,/^(?:GROUP\s+BY\b)/i,/^(?:IGNORE\b)/i,/^(?:FORCE\b)/i,/^(?:INNER\b)/i,/^(?:CROSS\b)/i,/^(?:FULL\b)/i,/^(?:ON\b)/i,/^(?:USING\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:OUTER\b)/i,/^(?:NATURAL\b)/i,/^(?:WHERE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:WITH\b)/i,/^(?:ROLLUP\b)/i,/^(?:HAVING\b)/i,/^(?:OFFSET\b)/i,/^(?:PROCEDURE\b)/i,/^(?:UPDATE\b)/i,/^(?:LOCK\b)/i,/^(?:SHARE\b)/i,/^(?:MODE\b)/i,/^(?:OJ\b)/i,/^(?:LIMIT\b)/i,/^(?:MICROSECOND\b)/i,/^(?:SECOND\b)/i,/^(?:MINUTE\b)/i,/^(?:HOUR\b)/i,/^(?:DAY\b)/i,/^(?:WEEK\b)/i,/^(?:MONTH\b)/i,/^(?:QUARTER\b)/i,/^(?:YEAR\b)/i,/^(?:SECOND_MICROSECOND\b)/i,/^(?:MINUTE_MICROSECOND\b)/i,/^(?:MINUTE_SECOND\b)/i,/^(?:HOUR_MICROSECOND\b)/i,/^(?:HOUR_SECOND\b)/i,/^(?:HOUR_MINUTE\b)/i,/^(?:DAY_MICROSECOND\b)/i,/^(?:DAY_SECOND\b)/i,/^(?:DAY_MINUTE\b)/i,/^(?:DAY_HOUR\b)/i,/^(?:YEAR_MONTH\b)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:~)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|)/i,/^(?:&)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<<)/i,/^(?:<=>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:[0][x][0-9a-fA-F]+)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?[eE][-][0-9]+(\.[0-9]+)?)/i,/^(?:[\$a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5:]*)/i,/^(?:\.)/i,/^(?:['"][@a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*["'])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}